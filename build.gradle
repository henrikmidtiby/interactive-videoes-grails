import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.SimpleFileVisitor
import java.nio.file.StandardCopyOption
import java.nio.file.attribute.BasicFileAttributes

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.1"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath 'org.grails.plugins:database-migration:3.0.4'
    }
}

version "0.1"
group "dk.sdu.tekvideo"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    // core
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.3.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.3.Final"
    compile 'org.grails.plugins:database-migration:3.0.4'
    compile 'org.liquibase:liquibase-core:3.5.5'
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.1"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    // app specific
    compile group: 'org.postgresql', name: 'postgresql', version: '42.0.0'
    compile 'org.grails.plugins:spring-security-core:3.1.2'
    compile 'org.grails.plugins:spring-security-ui:3.0.0.M2'
    compile 'com.google.apis:google-api-services-youtube:v3-rev151-1.20.0'
    compile 'org.grails.plugins:grails-markdown:3.0.0'
    compile 'org.grails.plugins:spring-security-cas:3.0.0'
    compile 'org.grails.plugins:external-config:1.1.2'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}


assets {
    minifyJs = true
    minifyCss = true
}


sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

task("buildFrontend").doLast {
    System.err.println "Building frontend"

    def base = new File(project.projectDir, "frontend")
    if (!base.exists()) throw new IllegalStateException("Could not find frontend source code: ${base.absolutePath}")
    def buildScript = new File(base, "build.sh")
    if (!buildScript.exists()) throw new IllegalStateException("Could not find build script: ${buildScript.absolutePath}")

    def process = new ProcessBuilder("bash", "build.sh").directory(base).start()
    def reader = new BufferedReader(new InputStreamReader(process.errorStream))
    String line
    while ((line = reader.readLine()) != null) {
        System.err.println line
    }
    reader.close()
    def exitCode = process.waitFor()
    if (exitCode != 0) throw new IllegalStateException("Build script had non-zero exit code ($exitCode)!")

    def outputDir = new File(project.buildDir, "assets")
    outputDir.mkdir()

    def frontendBuildDir = new File(base, "build/default")
    if (!frontendBuildDir.exists()) throw new IllegalStateException("Could not find result of frontend build. " +
            "Expected at: ${frontendBuildDir.absolutePath}")

    System.err.println "Copying frontend to assets ${frontendBuildDir.absolutePath} -> ${outputDir.absolutePath}"
    def source = frontendBuildDir.toPath()
    def output = outputDir.toPath()
    Files.walkFileTree(source, new SimpleFileVisitor<java.nio.file.Path>() {
        @Override
        FileVisitResult visitFile(java.nio.file.Path file, BasicFileAttributes attrs) throws IOException {
            if (file != null) {
                def destination = output.resolve(source.relativize(file))
                if (!Files.exists(destination)) {
                    Files.createDirectories(destination)
                }
                Files.copy(file, destination, StandardCopyOption.REPLACE_EXISTING)
            }
            return FileVisitResult.CONTINUE
        }
    })
    System.err.println "Finished building frontend"
}

assetCompile.dependsOn buildFrontend
